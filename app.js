(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./app/scripts/app.coffee":[function(require,module,exports){
var Board, app, pieces, randomPiece;

Board = require('./board');

pieces = ['one', 'two', 'three', 'four'];

randomPiece = function() {
  return pieces[Math.floor(Math.random() * pieces.length)];
};

app = angular.module('puzzleBattle', []);

app.directive('gameBoard', function() {
  return {
    restrict: 'E',
    templateUrl: 'board.html',
    controllerAs: 'game',
    controller: function($attrs, $rootScope) {
      this.score = 0;
      this.newGame = function() {
        this.board = new Board(+$attrs.rows, +$attrs.cols);
        return this.board.fill(randomPiece);
      };
      this.newGame();
      this.remove = function(cell) {
        var block, _ref;
        block = this.board.block(cell.row, cell.col);
        this.score += block.length * block.length;
        (_ref = this.board).remove.apply(_ref, block);
        return this.board.refill(randomPiece);
      };
      return $rootScope.$on('newgame', (function(_this) {
        return function(e, rows, cols) {
          $attrs.rows = rows;
          $attrs.cols = cols;
          return _this.newGame();
        };
      })(this));
    }
  };
});

app.directive('gameControls', function() {
  return {
    restrict: 'E',
    templateUrl: 'controls.html',
    controllerAs: 'ctrl',
    controller: [
      '$rootScope', function($rootScope) {
        this.rows = 8;
        this.cols = 12;
        return this.newGame = function() {
          return $rootScope.$broadcast('newgame', this.rows, this.cols);
        };
      }
    ]
  };
});

app.directive('gameScore', function() {
  return {
    restrict: 'E',
    template: "<h1>{{game.score}}</h1>"
  };
});



},{"./board":"/Users/ggray/code/puzzle-battle/app/scripts/board.coffee"}],"/Users/ggray/code/puzzle-battle/app/scripts/board.coffee":[function(require,module,exports){
var Board, Cell,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Cell = require('./cell');

Board = (function() {
  var markId;

  Board.Cell = Cell;

  function Board(rows, cols, value) {
    var c, r;
    this.rows = rows;
    this.cols = cols;
    this._board = (function() {
      var _i, _results;
      _results = [];
      for (r = _i = 0; 0 <= rows ? _i < rows : _i > rows; r = 0 <= rows ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (c = _j = 0; 0 <= cols ? _j < cols : _j > cols; c = 0 <= cols ? ++_j : --_j) {
            _results1.push(null);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    if (value != null) {
      this.fill(value);
    }
  }

  Board.prototype.comparator = function(cell1, cell2) {
    return Object.is(cell1.value, cell2.value);
  };

  Board.prototype.row = function(row) {
    return this._board[row] || [];
  };

  Board.prototype.cell = function(row, col) {
    return this.row(row)[col] || Cell.EMPTY;
  };

  Board.prototype.put = function(row, col, value) {
    return this._board[row][col] = new Cell(value, row, col);
  };

  Board.prototype.remove = function() {
    var cell, cells, _i, _len;
    cells = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    cells = cells.sort(function(a, b) {
      return b.col - a.col;
    });
    for (_i = 0, _len = cells.length; _i < _len; _i++) {
      cell = cells[_i];
      this._board[cell.row].splice(cell.col, 1);
      this._board[cell.row].push(new Cell);
    }
    this.eachCell(function(value, row, col, cell) {
      cell.row = row;
      return cell.col = col;
    });
  };

  Board.prototype.neighbors = function(row, col) {
    var bottom, left, right, top;
    top = this.cell(row - 1, col);
    right = this.cell(row, col + 1);
    bottom = this.cell(row + 1, col);
    left = this.cell(row, col - 1);
    return [top, right, bottom, left];
  };

  Board.prototype.eachCell = function(iterator, thisArg) {
    var c, cell, r, row, _i, _len, _ref, _results;
    _ref = this._board;
    _results = [];
    for (r = _i = 0, _len = _ref.length; _i < _len; r = ++_i) {
      row = _ref[r];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (c = _j = 0, _len1 = row.length; _j < _len1; c = ++_j) {
          cell = row[c];
          _results1.push(iterator.call(thisArg, cell != null ? cell.value : void 0, r, c, cell));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Board.prototype.fill = function(value, thisArg) {
    var iterator;
    iterator = typeof value === 'function' ? value : (function() {
      return value;
    });
    return this.eachCell((function(_this) {
      return function(cell, row, col) {
        return _this.put(row, col, iterator(row, col));
      };
    })(this));
  };

  Board.prototype.refill = function(value, thisArg) {
    var iterator;
    iterator = typeof value === 'function' ? value : (function() {
      return value;
    });
    return this.eachCell((function(_this) {
      return function(cell, row, col) {
        if (cell == null) {
          return _this.put(row, col, iterator(row, col));
        }
      };
    })(this));
  };

  Board.prototype.processRows = function() {
    this.eachCell((function(_this) {
      return function(value, row, col, cell) {
        var above, below, classes, next, prev, _ref;
        _ref = _this.neighbors(row, col), above = _ref[0], next = _ref[1], below = _ref[2], prev = _ref[3];
        classes = [];
        if (!_this.comparator(cell, prev)) {
          classes.push('first');
        }
        if (!_this.comparator(cell, next)) {
          classes.push('last');
        }
        if (_this.comparator(cell, below)) {
          classes.push('above');
        }
        if (_this.comparator(cell, above)) {
          classes.push('below');
        }
        return cell.$layout = {
          classes: classes
        };
      };
    })(this));
    this.eachCell((function(_this) {
      return function(value, row, col, cell) {
        var above, below, corners, next, prev, _ref;
        _ref = _this.neighbors(row, col), above = _ref[0], next = _ref[1], below = _ref[2], prev = _ref[3];
        corners = [];
        if (_this.comparator(cell, below)) {
          if (_this.comparator(cell, prev) && __indexOf.call(below.$layout.classes, 'first') >= 0) {
            corners.push('bottom left');
          }
          if (_this.comparator(cell, next) && __indexOf.call(below.$layout.classes, 'last') >= 0) {
            corners.push('bottom right');
          }
        }
        if (_this.comparator(cell, above)) {
          if (_this.comparator(cell, prev) && __indexOf.call(above.$layout.classes, 'first') >= 0) {
            corners.push('top left');
          }
          if (_this.comparator(cell, next) && __indexOf.call(above.$layout.classes, 'last') >= 0) {
            corners.push('top right');
          }
        }
        return cell.$layout.corners = corners;
      };
    })(this));
    return this._board;
  };

  markId = 0;

  Board.prototype.block = function(row, col) {
    var block, cell, enqueue, marker, queue, target, _i, _len, _ref;
    block = [];
    queue = [];
    marker = "mark" + (markId++);
    target = this.cell(row, col);
    enqueue = function(cell) {
      cell[marker] = true;
      return queue.push(cell);
    };
    enqueue(target);
    while (queue.length) {
      cell = queue.pop();
      if (this.comparator(target, cell)) {
        block.push(cell);
      }
      _ref = this.neighbors(cell.row, cell.col);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        if (this.comparator(target, cell)) {
          if (!cell[marker]) {
            enqueue(cell);
          }
        }
      }
    }
    this.eachCell(function(v, r, c, cell) {
      return delete cell[marker];
    });
    return block;
  };

  return Board;

})();

module.exports = Board;


/*
TODO: tests, input validation (in bounds)
 */



},{"./cell":"/Users/ggray/code/puzzle-battle/app/scripts/cell.coffee"}],"/Users/ggray/code/puzzle-battle/app/scripts/cell.coffee":[function(require,module,exports){
var Cell;

Cell = (function() {
  function Cell(value, row, col) {
    this.value = value;
    this.row = row;
    this.col = col;
  }

  Cell.EMPTY = new Cell;

  return Cell;

})();

module.exports = Cell;



},{}]},{},["./app/scripts/app.coffee"])
//# sourceMappingURL=data:application/json;base64,
